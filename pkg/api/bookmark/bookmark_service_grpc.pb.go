// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/bookmark/bookmark_service.proto

// unique package names as the path, / => .

package bookmark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bookmark_CreateBookmark_FullMethodName = "/github.llamaunicorn.grpc_bookmarks.protobuf.api.bookmark.Bookmark/CreateBookmark"
	Bookmark_ListBookmarks_FullMethodName  = "/github.llamaunicorn.grpc_bookmarks.protobuf.api.bookmark.Bookmark/ListBookmarks"
)

// BookmarkClient is the client API for Bookmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Bookmarks service for managing bookmarks
type BookmarkClient interface {
	// CreateBookmark create a single bookmark
	CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error)
	// ListBookmarks return bookmarks filtered by a condition
	ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error)
}

type bookmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarkClient(cc grpc.ClientConnInterface) BookmarkClient {
	return &bookmarkClient{cc}
}

func (c *bookmarkClient) CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookmarkResponse)
	err := c.cc.Invoke(ctx, Bookmark_CreateBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkClient) ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookmarksResponse)
	err := c.cc.Invoke(ctx, Bookmark_ListBookmarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarkServer is the server API for Bookmark service.
// All implementations must embed UnimplementedBookmarkServer
// for forward compatibility.
//
// Bookmarks service for managing bookmarks
type BookmarkServer interface {
	// CreateBookmark create a single bookmark
	CreateBookmark(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error)
	// ListBookmarks return bookmarks filtered by a condition
	ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error)
	mustEmbedUnimplementedBookmarkServer()
}

// UnimplementedBookmarkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookmarkServer struct{}

func (UnimplementedBookmarkServer) CreateBookmark(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookmark not implemented")
}
func (UnimplementedBookmarkServer) ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarks not implemented")
}
func (UnimplementedBookmarkServer) mustEmbedUnimplementedBookmarkServer() {}
func (UnimplementedBookmarkServer) testEmbeddedByValue()                  {}

// UnsafeBookmarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookmarkServer will
// result in compilation errors.
type UnsafeBookmarkServer interface {
	mustEmbedUnimplementedBookmarkServer()
}

func RegisterBookmarkServer(s grpc.ServiceRegistrar, srv BookmarkServer) {
	// If the following call pancis, it indicates UnimplementedBookmarkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bookmark_ServiceDesc, srv)
}

func _Bookmark_CreateBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServer).CreateBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookmark_CreateBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServer).CreateBookmark(ctx, req.(*CreateBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookmark_ListBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServer).ListBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookmark_ListBookmarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServer).ListBookmarks(ctx, req.(*ListBookmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookmark_ServiceDesc is the grpc.ServiceDesc for Bookmark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookmark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.llamaunicorn.grpc_bookmarks.protobuf.api.bookmark.Bookmark",
	HandlerType: (*BookmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBookmark",
			Handler:    _Bookmark_CreateBookmark_Handler,
		},
		{
			MethodName: "ListBookmarks",
			Handler:    _Bookmark_ListBookmarks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bookmark/bookmark_service.proto",
}
